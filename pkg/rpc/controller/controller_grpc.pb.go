// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: controller.proto

package controller

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Controller_Transaction_FullMethodName = "/controller.Controller/Transaction"
	Controller_PrintLog_FullMethodName    = "/controller.Controller/PrintLog"
	Controller_PrintDB_FullMethodName     = "/controller.Controller/PrintDB"
	Controller_PrintStatus_FullMethodName = "/controller.Controller/PrintStatus"
	Controller_PrintView_FullMethodName   = "/controller.Controller/PrintView"
)

// ControllerClient is the client API for Controller service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// this service is for controller calls to the system.
type ControllerClient interface {
	Transaction(ctx context.Context, in *TransactionMsg, opts ...grpc.CallOption) (*TransactionRsp, error)
	PrintLog(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[LogRsp], error)
	PrintDB(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DBRsp], error)
	PrintStatus(ctx context.Context, in *StatusMsg, opts ...grpc.CallOption) (*StatusRsp, error)
	PrintView(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ViewRsp, error)
}

type controllerClient struct {
	cc grpc.ClientConnInterface
}

func NewControllerClient(cc grpc.ClientConnInterface) ControllerClient {
	return &controllerClient{cc}
}

func (c *controllerClient) Transaction(ctx context.Context, in *TransactionMsg, opts ...grpc.CallOption) (*TransactionRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransactionRsp)
	err := c.cc.Invoke(ctx, Controller_Transaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) PrintLog(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[LogRsp], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Controller_ServiceDesc.Streams[0], Controller_PrintLog_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[emptypb.Empty, LogRsp]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Controller_PrintLogClient = grpc.ServerStreamingClient[LogRsp]

func (c *controllerClient) PrintDB(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DBRsp], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Controller_ServiceDesc.Streams[1], Controller_PrintDB_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[emptypb.Empty, DBRsp]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Controller_PrintDBClient = grpc.ServerStreamingClient[DBRsp]

func (c *controllerClient) PrintStatus(ctx context.Context, in *StatusMsg, opts ...grpc.CallOption) (*StatusRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusRsp)
	err := c.cc.Invoke(ctx, Controller_PrintStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) PrintView(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ViewRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ViewRsp)
	err := c.cc.Invoke(ctx, Controller_PrintView_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ControllerServer is the server API for Controller service.
// All implementations must embed UnimplementedControllerServer
// for forward compatibility.
//
// this service is for controller calls to the system.
type ControllerServer interface {
	Transaction(context.Context, *TransactionMsg) (*TransactionRsp, error)
	PrintLog(*emptypb.Empty, grpc.ServerStreamingServer[LogRsp]) error
	PrintDB(*emptypb.Empty, grpc.ServerStreamingServer[DBRsp]) error
	PrintStatus(context.Context, *StatusMsg) (*StatusRsp, error)
	PrintView(context.Context, *emptypb.Empty) (*ViewRsp, error)
	mustEmbedUnimplementedControllerServer()
}

// UnimplementedControllerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedControllerServer struct{}

func (UnimplementedControllerServer) Transaction(context.Context, *TransactionMsg) (*TransactionRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Transaction not implemented")
}
func (UnimplementedControllerServer) PrintLog(*emptypb.Empty, grpc.ServerStreamingServer[LogRsp]) error {
	return status.Errorf(codes.Unimplemented, "method PrintLog not implemented")
}
func (UnimplementedControllerServer) PrintDB(*emptypb.Empty, grpc.ServerStreamingServer[DBRsp]) error {
	return status.Errorf(codes.Unimplemented, "method PrintDB not implemented")
}
func (UnimplementedControllerServer) PrintStatus(context.Context, *StatusMsg) (*StatusRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrintStatus not implemented")
}
func (UnimplementedControllerServer) PrintView(context.Context, *emptypb.Empty) (*ViewRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrintView not implemented")
}
func (UnimplementedControllerServer) mustEmbedUnimplementedControllerServer() {}
func (UnimplementedControllerServer) testEmbeddedByValue()                    {}

// UnsafeControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ControllerServer will
// result in compilation errors.
type UnsafeControllerServer interface {
	mustEmbedUnimplementedControllerServer()
}

func RegisterControllerServer(s grpc.ServiceRegistrar, srv ControllerServer) {
	// If the following call pancis, it indicates UnimplementedControllerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Controller_ServiceDesc, srv)
}

func _Controller_Transaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).Transaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Controller_Transaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).Transaction(ctx, req.(*TransactionMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_PrintLog_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ControllerServer).PrintLog(m, &grpc.GenericServerStream[emptypb.Empty, LogRsp]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Controller_PrintLogServer = grpc.ServerStreamingServer[LogRsp]

func _Controller_PrintDB_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ControllerServer).PrintDB(m, &grpc.GenericServerStream[emptypb.Empty, DBRsp]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Controller_PrintDBServer = grpc.ServerStreamingServer[DBRsp]

func _Controller_PrintStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).PrintStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Controller_PrintStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).PrintStatus(ctx, req.(*StatusMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_PrintView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).PrintView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Controller_PrintView_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).PrintView(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Controller_ServiceDesc is the grpc.ServiceDesc for Controller service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Controller_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "controller.Controller",
	HandlerType: (*ControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Transaction",
			Handler:    _Controller_Transaction_Handler,
		},
		{
			MethodName: "PrintStatus",
			Handler:    _Controller_PrintStatus_Handler,
		},
		{
			MethodName: "PrintView",
			Handler:    _Controller_PrintView_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PrintLog",
			Handler:       _Controller_PrintLog_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PrintDB",
			Handler:       _Controller_PrintDB_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "controller.proto",
}
