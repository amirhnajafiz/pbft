syntax = "proto3";
package pbft;

import "google/protobuf/empty.proto";

option go_package = "./rpc/pbft";

// PBFT rpc services for transactions and pbft protocol.
// this service is used for handling internal node calls,
// and client to node rpc calls.
service PBFT {
  // internal calls
  rpc Request(RequestMsg) returns (google.protobuf.Empty) {}
  rpc PrePrepare(PrePrepareMsg) returns (google.protobuf.Empty) {}
  rpc PrePrepared(AckMsg) returns (google.protobuf.Empty) {}
  rpc Prepare(AckMsg) returns (google.protobuf.Empty) {}
  rpc Prepared(AckMsg) returns (google.protobuf.Empty) {}
  rpc Commit(AckMsg) returns (google.protobuf.Empty) {}
  rpc ViewChange(ViewChangeMsg) returns (google.protobuf.Empty) {}
  rpc NewView(NewViewMsg) returns (google.protobuf.Empty) {}
  rpc Checkpoint(CheckpointMsg) returns (google.protobuf.Empty) {}
  // client calls
  rpc PrintLog(google.protobuf.Empty) returns (stream LogRsp) {}
  rpc PrintDB(google.protobuf.Empty) returns (stream RequestRsp) {}
  rpc PrintStatus(StatusMsg) returns (StatusRsp) {}
  rpc PrintView(google.protobuf.Empty) returns (stream ViewRsp) {}
  rpc PrintCheckpoints(google.protobuf.Empty) returns (stream CheckpointRsp) {}
}

// defining request's status enum
enum RequestStatus {
  REQUEST_STATUS_UNSPECIFIED = 0; // undefined
  REQUEST_STATUS_PP = 1; // preprepared
  REQUEST_STATUS_P = 2; // prepared
  REQUEST_STATUS_C = 3; // committed
  REQUEST_STATUS_E = 4; // executed
}

// defining messages that are used in PBFT service
// transaction contains a request operations.
message TransactionMsg {
  string sender = 1;
  string reciever = 2;
  int64 amount = 3;
  int64 timestamp = 4;
}

// request will be sent by application to nodes.
message RequestMsg {
  TransactionMsg transaction = 1;
  TransactionRsp response = 2;
  RequestStatus status = 3;
  string client_id = 4;
}

// preprepare will be sent by the leader to all other nodes.
message PrePrepareMsg {
  RequestMsg request = 1;
  int64 sequence_number = 2;
  int64 view = 3;
  string digest = 4;
  string node_id = 5;
}

// ack messages will be used in pbft stages to continue the protocol.
message AckMsg {
  int64 sequence_number = 1;
  int64 view = 2;
  string digest = 3;
  string node_id = 4;
  bytes sign = 5;
  bool optimized = 6;
}

// checkpoint message will be used in checkpointing procedure.
message CheckpointMsg {
  int64 sequence_number = 1;
  string node_id = 2;
  repeated PrePrepareMsg preprepare_messages = 3;
}

// view chane message will be used in view changing procedure.
message ViewChangeMsg {
  int64 view = 1;
  int64 sequence_number = 2;
  int64 last_processing_sequence = 3;
  string node_id = 4;
  bytes signature = 5;
  repeated CheckpointMsg checkpoint_messages = 6;
  repeated PrePrepareMsg preprepare_messages = 7;
}

// new view message will be sent by the new leader to update other nodes logs.
message NewViewMsg {
  int64 view = 1;
  string node_id = 2;
  string viewchange_message = 3;
  repeated bytes shares = 4;
  repeated ViewChangeMsg viewchange_messages = 5;
  repeated PrePrepareMsg preprepare_messages = 6;
}

// status message will be sent by application to nodes.
message StatusMsg {
  int64 sequence_number = 1;
}

// log response will be sent to the user.
message LogRsp {
  string text = 1;
}

// status response will be sent to the user.
message StatusRsp {
  RequestStatus status = 1;
}

// request response will be sent to the user.
message RequestRsp {
  RequestMsg request = 1;
  int64 sequence_number = 2;
}

// view response will be sent to the user.
message ViewRsp {
  NewViewMsg newview_message = 2;
  int64 view = 1;
  repeated ViewChangeMsg viewchange_messages = 3;
}

// checkpoint response will be sent to the user.
message CheckpointRsp {
  int64 sequence_number = 1;
  repeated CheckpointMsg checkpoint_messages = 2;
}

// transaction response will be sent to the user.
message TransactionRsp {
  string text = 1;
}
