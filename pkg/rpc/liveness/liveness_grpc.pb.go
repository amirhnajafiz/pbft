// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: liveness.proto

package liveness

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Liveness_Ping_FullMethodName         = "/liveness.Liveness/Ping"
	Liveness_ChangeStatus_FullMethodName = "/liveness.Liveness/ChangeStatus"
	Liveness_Flush_FullMethodName        = "/liveness.Liveness/Flush"
)

// LivenessClient is the client API for Liveness service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// this service is for node's liveness status handling.
type LivenessClient interface {
	Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ChangeStatus(ctx context.Context, in *StatusMsg, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Flush(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type livenessClient struct {
	cc grpc.ClientConnInterface
}

func NewLivenessClient(cc grpc.ClientConnInterface) LivenessClient {
	return &livenessClient{cc}
}

func (c *livenessClient) Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Liveness_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *livenessClient) ChangeStatus(ctx context.Context, in *StatusMsg, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Liveness_ChangeStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *livenessClient) Flush(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Liveness_Flush_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LivenessServer is the server API for Liveness service.
// All implementations must embed UnimplementedLivenessServer
// for forward compatibility.
//
// this service is for node's liveness status handling.
type LivenessServer interface {
	Ping(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	ChangeStatus(context.Context, *StatusMsg) (*emptypb.Empty, error)
	Flush(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	mustEmbedUnimplementedLivenessServer()
}

// UnimplementedLivenessServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLivenessServer struct{}

func (UnimplementedLivenessServer) Ping(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedLivenessServer) ChangeStatus(context.Context, *StatusMsg) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeStatus not implemented")
}
func (UnimplementedLivenessServer) Flush(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Flush not implemented")
}
func (UnimplementedLivenessServer) mustEmbedUnimplementedLivenessServer() {}
func (UnimplementedLivenessServer) testEmbeddedByValue()                  {}

// UnsafeLivenessServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LivenessServer will
// result in compilation errors.
type UnsafeLivenessServer interface {
	mustEmbedUnimplementedLivenessServer()
}

func RegisterLivenessServer(s grpc.ServiceRegistrar, srv LivenessServer) {
	// If the following call pancis, it indicates UnimplementedLivenessServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Liveness_ServiceDesc, srv)
}

func _Liveness_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LivenessServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Liveness_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LivenessServer).Ping(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Liveness_ChangeStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LivenessServer).ChangeStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Liveness_ChangeStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LivenessServer).ChangeStatus(ctx, req.(*StatusMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Liveness_Flush_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LivenessServer).Flush(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Liveness_Flush_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LivenessServer).Flush(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Liveness_ServiceDesc is the grpc.ServiceDesc for Liveness service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Liveness_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "liveness.Liveness",
	HandlerType: (*LivenessServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Liveness_Ping_Handler,
		},
		{
			MethodName: "ChangeStatus",
			Handler:    _Liveness_ChangeStatus_Handler,
		},
		{
			MethodName: "Flush",
			Handler:    _Liveness_Flush_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "liveness.proto",
}
